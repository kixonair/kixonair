<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#0b0f14" />
  <title>Kixonair — Match Center</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/styles.css?v=30" />
  <link rel="icon" href="/logo.svg" type="image/svg+xml" />
  <style>
    :root{ --pad: clamp(12px, 3vw, 22px); }
    .wrap{max-width:980px;margin:0 auto;padding:var(--pad)}
    .headerbar{display:grid;grid-template-columns:auto 1fr auto;align-items:center;margin-bottom:10px}
    .headerbar .center{justify-self:center;}
    .badge{display:inline-block;border:1px solid #2a2f37;border-radius:999px;padding:4px 10px;font-size:12px;max-width:50vw;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}
    /* TEAMS HERO */
    .teams{display:grid;grid-template-columns:1fr auto 1fr;gap:14px;align-items:center;justify-items:center;margin:10px 0 4px}
    .side{display:flex;flex-direction:column;align-items:center;gap:8px;text-align:center}
    .side img{width:clamp(56px,14vw,84px);height:clamp(56px,14vw,84px);object-fit:contain}
    .teamName{font-size:clamp(16px,4.5vw,22px);font-weight:700;line-height:1.2}
    .h1{font-size:clamp(22px,8vw,34px);font-weight:900;text-align:center;letter-spacing:.06em}
    .muted{opacity:.78}
    .statusBig{margin-top:6px;margin-bottom:2px;text-align:center}
    /* Meta grid collapses gracefully */
    .meta{display:grid;grid-template-columns:repeat(3,minmax(0,1fr));gap:12px;margin:14px 0}
    @media(max-width:720px){ .meta{grid-template-columns:repeat(2,minmax(0,1fr));} }
    /* Server buttons */
    .serverbar{ display:flex; flex-wrap:wrap; gap:10px; justify-content:center; margin:12px 0 4px; }
    .serverbar .sbtn{ display:inline-flex; align-items:center; justify-content:center; min-width:110px;
      border:1px solid #2a2f37; border-radius:12px; padding:10px 14px; text-decoration:none; color:#cbd5e1 }
    .serverbar .sbtn:hover{ background:#121821 }
    /* Loading overlay */
    .loading{position:fixed;inset:0;display:flex;flex-direction:column;align-items:center;justify-content:center;background:rgba(3,8,14,.78);backdrop-filter:saturate(120%) blur(3px);z-index:50;transition:opacity .25s ease}
    .loading.hidden{opacity:0;pointer-events:none}
    .spinner{position:relative;width:74px;height:74px;margin-bottom:10px}
    .ring{position:absolute;inset:0;border-radius:50%;border:4px solid rgba(255,255,255,.14);border-top-color:rgba(255,255,255,.6);animation:spin 1s linear infinite}
    .dot{position:absolute;top:50%;left:50%;width:14px;height:14px;background:#22c55e;border-radius:50%;transform:translate(-50%,-50%);animation:pulse 1.2s ease-in-out infinite}
    .loadingText{font-size:14px;opacity:.9}
    @keyframes spin{to{transform:rotate(360deg)}}
    @keyframes pulse{0%,100%{transform:translate(-50%,-50%) scale(.85);opacity:.85}50%{transform:translate(-50%,-50%) scale(1.12);opacity:1}}
    /* Hide league badge on narrow screens; full league is in meta */
    @media(max-width:600px){ #leagueBadge{display:none} }
  
  .chip{display:inline-block;padding:4px 10px;border:1px solid #2a2f37;border-radius:999px;font-size:12px}
</style>

</head>
<body>
<header class="header">
  <div class="bar">
    <a class="brand" href="/"><img src="/logo.svg" alt="Kixonair" height="28"/></a>
    <div style="flex:1"></div>
  </div>
</header>

<main class="wrap">
  <div id="loadingOverlay" class="loading" aria-live="polite" aria-busy="true">
    <div class="spinner"><div class="ring"></div><div class="dot"></div></div>
    <div class="loadingText">Loading match…</div>
  </div>

  <div class="headerbar">
    <a class="btn" href="/" aria-label="Back to schedule">← Back</a>
    <div class="center"></div>
    <span id="leagueBadge" class="badge"></span>
  </div>

  <div class="teams">
    <div class="side home"><img id="homeLogo" alt="" width="64" height="64" loading="lazy"/><span class="teamName" id="homeName"></span></div>
    <div class="h1" id="versus">VS</div>
    <div class="side away"><img id="awayLogo" alt="" width="64" height="64" loading="lazy"/><span class="teamName" id="awayName"></span></div>
  </div>
  <div class="muted statusBig" id="statusLine" style="text-align:center"></div>
<div style="text-align:center;margin-top:4px;"><span id="minuteChip" class="chip" style="display:none"></span></div>

  <div class="meta">
    <div><span class="muted small">Kickoff</span><div id="kickoff">-</div></div>
    <div><span class="muted small">Competition</span><div id="league">-</div></div>
    <div><span class="muted small">Status</span><div id="state">-</div></div>
  </div>

  <!-- Server buttons row -->
  <div id="serverBar" class="serverbar"></div>
</main>

<script>
  let __loadFailTimer = null;
  function hideLoading(){ try{ document.getElementById('loadingOverlay').classList.add('hidden'); }catch{} if(__loadFailTimer){clearTimeout(__loadFailTimer);__loadFailTimer=null;} }
  function qs(name){ return new URLSearchParams(location.search).get(name) || ''; }
  function slug(s){ return String(s||'').toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/(^-|-$)/g,''); }
  function capWords(s){ return String(s||'').split(/[-\s]+/).map(w => w? w[0].toUpperCase()+w.slice(1):'').join(' '); }
  const $ = id => document.getElementById(id);
  function minutesSince(dt){ try{ return (Date.now() - Date.parse(dt))/60000; } catch { return NaN; } }
  function normalizeStatus(fx){
  const raw = String(fx?.status || fx?.state || '').trim();
  const lc  = raw.toLowerCase();
  const ko  = fx?.start_utc || fx?.kickoff || fx?.date || null;

  // Half-time variants
  if (['ht','half-time','halftime','interval'].some(k => lc === k) || lc.includes('half')) {
    return 'Half-time';
  }

  // If feed says finished but we're in 35–70 mins from kickoff -> still halftime
  const m = minutesSince(ko);
  if ((lc === 'finished' || lc === 'ft' || lc.includes('full')) && !isNaN(m) && m > 35 && m < 70) {
    return 'Half-time';
  }

  // Live play
  if (
    lc.includes('live') || lc === '1h' || lc === '2h' ||
    lc.includes('in play') || lc.includes('1st') || lc.includes('2nd')
  ) {
    return 'LIVE';
  }

  // Other common states
  if (lc.includes('postponed') || lc.includes('suspended')) return 'POSTP.';
  if (lc.includes('cancel')) return 'CANCELLED';
  if (lc.includes('delayed')) return 'DELAYED';
  if (lc.includes('finished') || lc === 'ft' || lc.includes('full')) return 'FINISHED';

  return 'SCHEDULED';
}
// Live play
    if (lc.includes('live') || lc === '1h' || lc === '2h' || lc.includes('in play')) return 'LIVE';

    // Scheduled / upcoming
    if (!raw) return 'SCHEDULED';
    return raw.toUpperCase();
  }


  function renderServerButtonsFromSlug(sl){
    const bar = $('serverBar'); if (!bar) return;
    const labels = ['Server 1','Server 2','Server 3','Server 4','Server 5'];
    const url = 'https://rileymarker.com/sportlo?m=' + encodeURIComponent(sl);
    bar.innerHTML = labels.map(l => `<a class="sbtn" href="${url}" target="_blank" rel="noopener">${l}</a>`).join('');
  }
  function renderServerButtonsFromFixture(fx){
    const home = fx?.home?.name || ''; const away = fx?.away?.name || '';
    const sl = slug(home + '-vs-' + away);
    renderServerButtonsFromSlug(sl);
  }

  // Prime: if the id already contains a slug part, prefill names & server buttons
  (function prime(){
    const id = qs('id');
    if (id && id.includes('@')){
      const slPart = id.split('@')[0];
      const toks = slPart.split('-vs-');
      if (toks.length === 2){
        $('homeName').textContent = capWords(toks[0]);
        $('awayName').textContent = capWords(toks[1]);
        renderServerButtonsFromSlug(slPart);
      }
    }
  })();

  async function fixturesFor(dateStr){
    const r = await fetch('/api/fixtures?date=' + encodeURIComponent(dateStr), {cache:'no-store'}).catch(()=>null);
    const j = r ? await r.json().catch(()=>null) : null;
    return Array.isArray(j?.fixtures) ? j.fixtures : [];
  }
  function ymdFromIso(x){ try{ return String(x||'').slice(0,10) || null; }catch{return null;} }
  function addDays(dateStr, delta){
    const dt = new Date(Date.UTC(+dateStr.slice(0,4), +dateStr.slice(5,7)-1, +dateStr.slice(8,10)));
    dt.setUTCDate(dt.getUTCDate()+delta);
    return dt.toISOString().slice(0,10);
  }
  function tokens(name){
    const s = slug(name); const parts = s.split('-').filter(Boolean);
    const first = parts[0] || s, last = parts[parts.length-1] || s;
    return { full:s, first, last };
  }
  function matchSlug(slugPart, fx){
    const nmHome = tokens(fx.home?.name || '');
    const nmAway = tokens(fx.away?.name || '');
    const pairA = slug(nmHome.full + '-vs-' + nmAway.full);
    const pairB = slug(nmAway.full + '-vs-' + nmHome.full);
    if (slugPart === pairA || slugPart === pairB) return true;
    const toks = slugPart.split('-vs-');
    if (toks.length === 2){
      const a=toks[0], b=toks[1];
      const hitAB = (nmHome.full.includes(a) || nmHome.first===a || nmHome.last===a) && (nmAway.full.includes(b) || nmAway.first===b || nmAway.last===b);
      const hitBA = (nmHome.full.includes(b) || nmHome.first===b || nmHome.last===b) && (nmAway.full.includes(a) || nmAway.first===a || nmAway.last===a);
      return hitAB || hitBA;
    }
    return false;
  }

  function applyFixture(fx){
    window.__lastFixture = fx;
    const homeName = fx.home?.name || 'Home';
    const awayName = fx.away?.name || 'Away';
    const homeLogo = fx.home?.logo || '';
    const awayLogo = fx.away?.logo || '';
    const league   = fx.league?.name || '';
    const status   = fx.status || 'SCHEDULED';
    const kickoff  = fx.start_utc || '';

    $('homeName').textContent = homeName;
    $('awayName').textContent = awayName;
    $('homeLogo').src = homeLogo || '/logo.svg';
    $('awayLogo').src = awayLogo || '/logo.svg';
    $('leagueBadge').textContent = league || ''; $('league').textContent = league || '-';
    $('state').textContent = normalizeStatus(fx);
    $('kickoff').textContent = kickoff ? new Date(kickoff).toLocaleString() : '-';
    $('statusLine').textContent = normalizeStatus(fx);

    renderServerButtonsFromFixture(fx);
    try{ updateMinuteChip(fx); }catch{}
    hideLoading();
  }

  async function load(){
  document.getElementById('loadingOverlay').classList.remove('hidden');
  __loadFailTimer = setTimeout(hideLoading, 3000);
  try {
    document.getElementById('loadingOverlay').classList.remove('hidden');
    __loadFailTimer = setTimeout(hideLoading, 3000);

    const id  = qs('id');
    if (!id){ $('statusLine').textContent = normalizeStatus(fx); hideLoading(); return; }

    // Try server lookup quickly; if slow, do client-side scan
    async function serverResolve(){ try{ const r = await fetch('/api/fixture/' + encodeURIComponent(id)); if (r.ok){ const j = await r.json(); return j.fixture || null; } }catch{} return null; }
    async function clientResolve(){
      const hasAt = id.includes('@');
      const slugPart = slug(hasAt ? id.split('@')[0] : id);
      const isoHint  = hasAt ? id.split('@')[1] : null;
      const base = ymdFromIso(isoHint) || new Date().toISOString().slice(0,10);
      const days = [addDays(base,-1), base, addDays(base,1), addDays(base,2)];
      for (const d of days){
        const list = await fixturesFor(d);
        const hit = list.find(fx => matchSlug(slugPart, fx));
        if (hit) return hit;
      }
      return null;
    }

    const [s,c] = await Promise.allSettled([serverResolve(), clientResolve()]);
    const fx = (s.status==='fulfilled' && s.value) || (c.status==='fulfilled' && c.value) || null;
    if (fx){ applyFixture(fx); } else { $('statusLine').textContent = normalizeStatus(fx); hideLoading(); }
    } finally { hideLoading(); }
  }
  load();

  function updateMinuteChip(fx){
    const chip = $('minuteChip'); if (!chip) return;
    const txt = minuteDisplay(fx);
    if (txt){ chip.textContent = txt; chip.style.display = 'inline-block'; }
    else { chip.style.display = 'none'; }
  }

<script>
  async function refreshStatus(){
    try{
      const id = new URLSearchParams(location.search).get('id') || '';
      if (!id) return;
      const r = await fetch('/api/fixture/' + encodeURIComponent(id));
      if (!r.ok) return;
      const j = await r.json();
      const fx = j.fixture || null;
      if (!fx) return;
      // Only update the status/minute fields to avoid flicker
      $('state').textContent = normalizeStatus(fx);
      $('statusLine').textContent = normalizeStatus(fx);
      updateMinuteChip(fx);
    }catch(e){/* ignore */}
  }
  setInterval(refreshStatus, 60000);
</script>
</body>
</html>
